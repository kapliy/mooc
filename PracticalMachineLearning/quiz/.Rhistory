inTrain <- createDataPartition(Wage$wage, p=0.7, list=F)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[, c('age', 'education', 'jobclass')], y=training$wage, plots='pairs')
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
dim(training); dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
qplot(wage, age, data=training)
qplot(age, wage, color=jobclass, data=training)
qplot(age, wage, color=education, data=training)
modelFit <- train(wage ~ age + jobclass + education, method='lm', data=training)
finMod <- modelFit$finalModel
print(modFit)
modFit <- train(wage ~ age + jobclass + education, method='lm', data=training)
finMod <- modFit$finalModel
finMod
modFit
print(modFit)
finMod
plot(finMod)
plot(finMod, 1, pch=19, cex=0.5, col='#00000010')
qplot(finMod$fitted, finMod$residuals)
qplot(finMod$fitted, finMod$residuals, color=race, data=training)
qplot(finMod$fitted, finMod$residuals, color=race)
qplot(finMod$fitted, finMod$residuals, color=race, data=training)
plot(finModel$residuals, pch=19)
plot(finMod$residuals, pch=19)
plot(finMod$residuals, pch=19)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
AlzheimerDisease
diagnosis
predictors
names(predictors)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
mixtures
dim(mixtures)
names(mixtures)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain
length(inTrain)
dim(mixtures)
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(training$Superplasticizer, geom = 'hist')
qplot(training$Superplasticizer, geom = 'histogram')
qplot(log10(training$Superplasticizer), geom = 'histogram')
qplot(training$Superplasticizer, geom = 'histogram')
qplot(log10(training$Superplasticizer), geom = 'histogram')
qplot(log10(testing$Superplasticizer), geom = 'histogram')
qplot((testing$Superplasticizer), geom = 'histogram')
qplot(testing$Superplasticizer, geom = 'histogram')
qplot(training$Superplasticizer, geom = 'histogram')
qplot(testing$Superplasticizer, geom = 'histogram')
qplot(training$Superplasticizer, geom = 'histogram')
qplot(training$Superplasticizer, geom = 'histogram')
training$Superplasticizer
log10(training$Superplasticizer)
training$Superplasticizer
training$Superplasticizer < 0.004
training$Superplasticizer < 0
SUM(training$Superplasticizer < 0)
sum(training$Superplasticizer < 0)
training$Superplasticizer < 0
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
names(training)
startsWith
library(gdata)
install.packages('gdata')
library(gdata)
startsWith('hello', 'he')
names(training)
startsWith(names(training),'IL')
IL <- names(trainint)[startsWith(names(training),'IL')]
IL <- names(training)[startsWith(names(training),'IL')]
IL
IL
IL
training[, IL]
dim(training[, IL])
ex <- training[, IL]
ex
preProc <- preProcess(ex,method="pca", pcaComp=2)
preProc
ex
z <- preProcess(ex, method='pca', thresh=0.9)
z
preProcess(ex,method="pca", pcaComp=2)
z <- preProcess(ex, method='pca', thresh=0.9)
z
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL
ex <- training[, IL]
ex
dim(ex)
training$diagnosis
ex <- training[, c(IL, 'diagnosis')]
ex
names(ex)
mod1 <- train(training, method='glm')
mod1 <- train(diagnosis ~ ., data=training, method='glm')
warnings()
mod1
mod1
confusionMatrix(testing$diagnosis, predict(mod1, newdata=testing))
mod1 <- train(diagnosis ~ ., data=training, method='glm')
confusionMatrix(testing$diagnosis, predict(mod1, newdata=testing))
training
names(training)
IL <- names(training)[startsWith(names(training),'IL')]
IL
ex <- training[, c(IL, 'diagnosis')]
mod1 <- train(diagnosis ~ ., data=ex, method='glm')
mod1
confusionMatrix(testing$diagnosis, predict(mod1, newdata=testing))
mod2 <- train(diagnosis ~ ., data=ex, method='glm', preProcess='pca', trControl = trainControl(preProcOptions = list(thresh = 0.8)))
mod2
confusionMatrix(testing$diagnosis, predict(mod2, newdata=testing))
ls
ls
ls()
?rpois
set.seed(1)
rpois(5, 2)
?rnorm
rnorm(10)
qpos
rep(0:1, each=5)
swirl
library.load('swirl')
aa <- c('a','b')
saveRDS(aa, 'bla.rds')
saveRDS(aa, 'bla.rds')
saveRDS(aa, 'bla.rds')
readRDS('bla.rds')
setwd("~/mooc/PracticalMachineLearning/data")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
?vowel.test
vowel
colnames(vowel.train)
vowel.train(, 'y') <- factor(vowel.train(, 'y'))
vowel.train[, 'y'] <- factor(vowel.train[, 'y'])
vowel.test[, 'y'] <- factor(vowel.test[, 'y'])
set.seed(33833)
mod1<- train(y~., data=vowel.train, method='rf')
library('caret')
mod1<- train(y~., data=vowel.train, method='rf')
mod2<- train(y~., data=vowel.train, method='gbm')
mod1
mod2
predict(mod1, newdata=vowel.test)
?confusionMatrix(predict(mod1, newdata=vowel.test)
)
confusionMatrix(predict(mod1, newdata=vowel.test), vowel.test$y)
confusionMatrix(predict(mod2, newdata=vowel.test), vowel.test$y)
confusionMatrix(predict(mod1, newdata=vowel.test), vowel.test$y)
confusionMatrix(predict(mod2, newdata=vowel.test), vowel.test$y)
#confusionMatrix(predict(mod2, newdata=vowel.test), vowel.test$y)
predict(mod2, newdata=vowel.test) == predict(mod1, newdata=vowel.test)
bothA <- vowel.test[predict(mod2, newdata=vowel.test) == predict(mod1, newdata=vowel.test),]
confusionMatrix(predict(mod2, newdata=bothA), bothA$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training
colnames(training)
set.seed(62433)
mod1 <- train(diagnosis~., data=training, method='rf')
mod2 <- train(diagnosis~., data=training, method='gbm')
mod3 <- train(diagnosis~., data=training, method='lda')
pred1 <- predict(mod1,newdata=testing);
pred2 <- predict(mod2,newdata=testing)
pred3 <- predict(mod3,newdata=testing)
mod1 <- train(diagnosis~., data=training, method='rf')
predDF <- data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
combModFit <- train(diagnosis~.,method="rf",data=predDF)
combPred <- predict(combModFit,predDF)
combPred
confusionMatrix(combPred$diagnosis, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
?confusionMatrix
confusionMatrix(pred1, training$diagnosis)
confusionMatrix(pred2, training$diagnosis)
confusionMatrix(pred3, training$diagnosis)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
rm(list = ls())
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
model_rf = train(diagnosis ~ ., method = 'rf', data = training)
model_gbm = train(diagnosis ~ ., method = 'gbm', data = training)
model_lda = train(diagnosis ~ ., method = 'lda', data = training)
pred_rf = predict(model_rf, training)
pred_gbm = predict(model_gbm, training)
pred_lda = predict(model_lda, training)
comb_data = data.frame(rf = pred_rf, gbm = pred_gbm, lda = pred_lda, diagnosis = training$diagnosis)
model_comb = train(diagnosis ~ ., method = 'rf', data = comb_data)
pred_rf_test = predict(model_rf, testing)
pred_gbm_test = predict(model_gbm, testing)
pred_lda_test = predict(model_lda, testing)
comb_data_test = data.frame(rf = pred_rf_test, gbm = pred_gbm_test, lda = pred_lda_test, diagnosis = testing$diagnosis)
pred_comb_test = predict(model_comb, comb_data_test)
accuracy_rf = sum(pred_rf_test == testing$diagnosis) / length(pred_rf_test)
accuracy_gbm = sum(pred_gbm_test == testing$diagnosis) / length(pred_gbm_test)
accuracy_lda = sum(pred_lda_test == testing$diagnosis) / length(pred_lda_test)
accuracy_comb = sum(pred_comb_test == comb_data_test$diagnosis) / length(pred_comb_test)
accuracy_rf
accuracy_gbm
accuracy_lda
accuracy_lda
set.seed(62433)
mod1 <- train(diagnosis~., data=training, method='rf')
mod2 <- train(diagnosis~., data=training, method='gbm')
mod3 <- train(diagnosis~., data=training, method='lda')
# train combiner
pred1 <- predict(mod1,newdata=training);
pred2 <- predict(mod2,newdata=training)
pred3 <- predict(mod3,newdata=training)
predDF <- data.frame(pred1,pred2,pred3,diagnosis=training$diagnosis)
combModFit <- train(diagnosis~.,method="rf",data=predDF)
# user combiner
pred1 <- predict(mod1,newdata=testing);
pred2 <- predict(mod2,newdata=testing)
pred3 <- predict(mod3,newdata=testing)
predDF <- data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
combPred <- predict(combModFit, newdata=predDF)
confusionMatrix(combPred, testing$diagnosis)
(combPred-testing$diagnosis)^2
combPred
sum(combPred == testing$diagnosis) / length(combPred)
sum(pred1 == testing$diagnosis) / length(pred1)  # rf
sum(pred2 == testing$diagnosis) / length(pred2)  # gbm
sum(pred3 == testing$diagnosis) / length(pred3)  # lda
sum(combPred == testing$diagnosis) / length(combPred)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
combPred
concrete
colnames(concrete)
?concrete
?plot.enet
plot.enet
set.seed(233)
mod <- model.train(CompressiveStrength~., data=training, method='lasso')
set.seed(233)
mod <- train(CompressiveStrength~., data=training, method='lasso')
mod
set.seed(233)
mod <- train(CompressiveStrength~., data=training, method='lasso')
mod
plot.enet
?plot.enet
plot(model$finalModel)
plot(mod$finalModel)
plot.enet(mod$finalModel)
setwd("~/mooc/PracticalMachineLearning/quiz")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages('lubricate')
install.packages('lubricate')
install.packages('lubricateA')
install.packages('lubricate')
install.packages('lubridate')
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
training
colnames(training)
?bats
??bats
bats
library('forecast')
install.packages('forecast')
library('forecast')
?bats
?Op
bats(tstrain)
bats(tstrain)
testing
tstrain
training
tstrain
testing
training
fc <- bats(tstrain)
forecast(fc)
mod <- bats(tstrain)
pred <- forecast(mod)
accuracy(pred, remdata$testing)
acc = sum(testing$visitsTumblr <= pred$upper) / nrow(testing)
mod <- bats(tstrain)
pred <- forecast(mod)
accuracy(pred, testing$testing)
acc = sum(testing$visitsTumblr <= pred$upper) / nrow(testing)
mod <- bats(tstrain)
pred <- forecast(mod)
pred
mod
accuracy(pred, testing$visitsTumblr)
acc = sum(testing$visitsTumblr <= pred$upper) / nrow(testing)
testing$visitsTumblr <= pred$upper
testing$visitsTumblr
pred$upper
dat = read.csv("gaData.csv")
training = dat[year(dat$date) == 2011,]
tstrain = ts(training$visitsTumblr)
remdata = dat[year(dat$date) > 2011,]
tsrem = ts(remdata$visitsTumblr)
model = bats(tstrain)
pred <- forecast(model, h=length(tsrem),level=c(95))
accuracy(pred, remdata$visitsTumblr)
acc = sum(remdata$visitsTumblr <= pred$upper) / nrow(remdata)
dat = read.csv("gaData.csv")
training = dat[year(dat$date) <2012,]
tstrain = ts(training$visitsTumblr)
remdata = dat[year(dat$date) > 2011,]
tsrem = ts(remdata$visitsTumblr)
model = bats(tstrain)
pred <- forecast(model, h=length(tsrem),level=c(95))
accuracy(pred, remdata$visitsTumblr)
acc = sum(remdata$visitsTumblr <= pred$upper) / nrow(remdata)
acc
dat = read.csv("gaData.csv")
training = dat[year(dat$date) <2012,]
tstrain = ts(training$visitsTumblr)
remdata = dat[year(dat$date) > 2011,]
tsrem = ts(remdata$visitsTumblr)
model = bats(tstrain)
pred <- forecast(model)
accuracy(pred, remdata$visitsTumblr)
acc = sum(remdata$visitsTumblr <= pred$upper) / nrow(remdata)
acc
dat = read.csv("gaData.csv")
training = dat[year(dat$date) <2012,]
tstrain = ts(training$visitsTumblr)
remdata = dat[year(dat$date) > 2011,]
tsrem = ts(remdata$visitsTumblr)
model = bats(tstrain)
pred <- forecast(model)
sum(remdata$visitsTumblr <= pred$upper) / nrow(remdata)
dat = read.csv("gaData.csv")
training = dat[year(dat$date) <2012,]
tstrain = ts(training$visitsTumblr)
remdata = dat[year(dat$date) > 2011,]
tsrem = ts(remdata$visitsTumblr)
model = bats(tstrain)
pred <- forecast(model)
accuracy(pred, remdata$visitsTumblr)
install.packages('e1071')
install.packages("e1071")
install.packages("e1071")
install.packages("e1071")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
set.seed(3523)
library(caret)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
colnames(training)
mod <- svm(CompressiveStrength~., data=training)
set.seed(3523)
library(caret)
library(e1071)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
mod <- svm(CompressiveStrength~., data=training)
mod
predict(mod, newdata=testing)
confusionMatrix(predict(mod, newdata=testing), testing$CompressiveStrength)
predict(mod, newdata=testing)
dims(predict(mod, newdata=testing))
dim(predict(mod, newdata=testing))
length(predict(mod, newdata=testing))
predict(mod, newdata=testing)[1]
predict(mod, newdata=testing)[2]
predict(mod, newdata=testing)$CompressiveStrength
set.seed(325)
mod <- svm(CompressiveStrength~., data=training)
pred = predict(model, testing)
sqrt(sum((pred - testing$CompressiveStrength)^2))
set.seed(3523)
library(caret)
library(e1071)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
mod <- svm(CompressiveStrength~., data=training)
pred = predict(mod, testing)
sqrt(sum((pred - testing$CompressiveStrength)^2))
107^2
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
# Set the seed to 325 and fit a support vector machine using the e1071 package
# to predict Compressive Strength using the default settings. Predict on the
# testing set. What is the RMSE?
set.seed(325)
library(e1071)
library(caret)
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
prediction <- predict(fit, testing)
accuracy(prediction, testing$CompressiveStrength)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
# Set the seed to 325 and fit a support vector machine using the e1071 package
# to predict Compressive Strength using the default settings. Predict on the
# testing set. What is the RMSE?
set.seed(325)
library(e1071)
library(caret)
library(kernlab)
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
prediction <- predict(fit, testing)
accuracy(prediction, testing$CompressiveStrength)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
# Set the seed to 325 and fit a support vector machine using the e1071 package
# to predict Compressive Strength using the default settings. Predict on the
# testing set. What is the RMSE?
set.seed(325)
library(e1071)
library(forecast)
library(caret)
library(kernlab)
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
prediction <- predict(fit, testing)
accuracy(prediction, testing$CompressiveStrength)
