plot(training$waiting, training$eruptions, pch=19)
plot(training$waiting, training$eruptions, pch=19)
plot(training$waiting, training$eruptions, pch=19)
plot(training$waiting, training$eruptions, pch=19, col='blue')
qplot(training$waiting, training$eruptions, pch=19, col='blue')
qplot(training$waiting, training$eruptions, col='blue')
qplot(training$waiting, training$eruptions, col='blue')
plot(training$waiting, training$eruptions, col='blue')
plot(training$waiting, training$eruptions, col='blue', xlab='Waiting', ylab='Eruptions')
qplot(training$waiting, training$eruptions, xlab='Waiting', ylab='Eruptions')
lm1 <- train(eruptions ~ ., data=training)
lm1 <- lm(eruptions ~ ., data=training)
lm1
summary(lm1)
qplot(training$waiting, training$eruptions, xlab='Waiting', ylab='Eruptions')
plot(training$waiting, training$eruptions, xlab='Waiting', ylab='Eruptions')
lines(training$waiting, lm1$fitted, lwd=3)
?lines
qplot(training$waiting, training$eruptions, xlab='Waiting', ylab='Eruptions')
qplot(training$waiting, lm1$fitted, geom="line")
qplot(training$waiting, training$eruptions, xlab='Waiting', ylab='Eruptions') + qplot(training$waiting, lm1$fitted, geom="line")
qplot(training$waiting, training$eruptions, xlab='Waiting', ylab='Eruptions') + qplot(training$waiting, lm1$fitted, geom="line")
p1 <- qplot(training$waiting, training$eruptions, xlab='Waiting', ylab='Eruptions')
p2 <- qplot(training$waiting, lm1$fitted, geom="line")
p1 <- qplot(training$waiting, training$eruptions, xlab='Waiting', ylab='Eruptions')
p1
p2
p1 + p2
p2 <- geom_line(training$waiting, lm1$fitted)
plot(training$waiting, training$eruptions, xlab='Waiting', ylab='Eruptions')
plot(training$waiting, training$eruptions, xlab='Waiting', ylab='Eruptions')
lines(training$waiting, lm1$fitted, lwd=3)
coef(lm1)
newdata <- data.frame(waiting=80)
predict(lm1, newdata=newdata)
par(mfrow=c(1,2))
plot(training$waiting, training$eruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(training$waiting, predict(lm1), lwd=3)
plot(testing$waiting, testing$eruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(testing$waiting, predict(lm1, newdata=testing), lwd=3)
confusionMatrix(testing$type, predict(lm1,testing))
confusionMatrix(testing$waiting, predict(lm1,testing))
confusionMatrix(testing$eruptions, predict(lm1))
confusionMatrix(training$eruptions, predict(lm1))
lm1
lm1$fitted - training$eruptions
(lm1$fitted - training$eruptions)^2
sqrt(sum((lm1$fitted - training$eruptions)^2))
sqrt(sum((predict(lm1, newdata=testing) - testing$eruptions)^2))
pred1 <- predict(lm1, newdata=testing, interval="prediction")
ord <- order(testFaith$waiting)
ord <- order(testing$waiting)
or
ord
plot(testing$waiting, testing$eruptions, pch=19, col="blue")
par(mfrow=1)
par(mfrow=c(1)
)
par(mfrow=c(1,1))
plot(testing$waiting, testing$eruptions, pch=19, col="blue")
plot(testing$waiting, testing$eruptions, pch=19, col="blue")
?matlines
matlines(testing$waiting[ord], pred1[ord], type="l",,col=(1,2,2), lty=c(1,1,1), lwd=3)
matlines(testing$waiting[ord], pred1[ord], type="l",col=(1,2,2), lty=c(1,1,1), lwd=3)
matlines(testing$waiting[ord], pred1[ord], type="l",,col=c(1,2,2), lty=c(1,1,1), lwd=3)
matlines(testing$waiting[ord], pred1[ord], type="l",,col=c(1,2,2), lty=c(1,1,1), lwd=3)
matlines(testing$waiting[ord], pred1[ord,], type="l",,col=c(1,2,2), lty=c(1,1,1), lwd=3)
matlines(testing$waiting[ord], pred1[ord,], type="l",,col=c(1,2,2), lty=c(1,1,1), lwd=3)
modelFit <- train(eruptions ~ waiting, method='lm', data=training)
summary(modelFit)
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
Wage <- subset(Wage, select=-c(logwage))
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
Wage <- subset(Wage, select=-c(logwage))
summary(Wage)
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
Wage <- subset(Wage, select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(Wage, p=0.7, list=F)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[, c('age', 'education', 'jobclass')], y=training$wage, plots='pairs')
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
Wage <- subset(Wage$wage, select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(Wage, p=0.7, list=F)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[, c('age', 'education', 'jobclass')], y=training$wage, plots='pairs')
training
featurePlot(x=training[, c('age', 'education', 'jobclass')], y=training$wage, plots='pairs')
training$wage
training[, c('age', 'education', 'jobclass')]
dim(training[, c('age', 'education', 'jobclass')])
length(training)
dim(training)
featurePlot(x=training[, c('age', 'education', 'jobclass')], y=training$wage, plots='pairs')
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(Wage$wage, p=0.7, list=F)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[, c('age', 'education', 'jobclass')], y=training$wage, plots='pairs')
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
dim(training); dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
qplot(wage, age, data=training)
qplot(age, wage, color=jobclass, data=training)
qplot(age, wage, color=education, data=training)
modelFit <- train(wage ~ age + jobclass + education, method='lm', data=training)
finMod <- modelFit$finalModel
print(modFit)
modFit <- train(wage ~ age + jobclass + education, method='lm', data=training)
finMod <- modFit$finalModel
finMod
modFit
print(modFit)
finMod
plot(finMod)
plot(finMod, 1, pch=19, cex=0.5, col='#00000010')
qplot(finMod$fitted, finMod$residuals)
qplot(finMod$fitted, finMod$residuals, color=race, data=training)
qplot(finMod$fitted, finMod$residuals, color=race)
qplot(finMod$fitted, finMod$residuals, color=race, data=training)
plot(finModel$residuals, pch=19)
plot(finMod$residuals, pch=19)
plot(finMod$residuals, pch=19)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
AlzheimerDisease
diagnosis
predictors
names(predictors)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
mixtures
dim(mixtures)
names(mixtures)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain
length(inTrain)
dim(mixtures)
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(training$Superplasticizer, geom = 'hist')
qplot(training$Superplasticizer, geom = 'histogram')
qplot(log10(training$Superplasticizer), geom = 'histogram')
qplot(training$Superplasticizer, geom = 'histogram')
qplot(log10(training$Superplasticizer), geom = 'histogram')
qplot(log10(testing$Superplasticizer), geom = 'histogram')
qplot((testing$Superplasticizer), geom = 'histogram')
qplot(testing$Superplasticizer, geom = 'histogram')
qplot(training$Superplasticizer, geom = 'histogram')
qplot(testing$Superplasticizer, geom = 'histogram')
qplot(training$Superplasticizer, geom = 'histogram')
qplot(training$Superplasticizer, geom = 'histogram')
training$Superplasticizer
log10(training$Superplasticizer)
training$Superplasticizer
training$Superplasticizer < 0.004
training$Superplasticizer < 0
SUM(training$Superplasticizer < 0)
sum(training$Superplasticizer < 0)
training$Superplasticizer < 0
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
names(training)
startsWith
library(gdata)
install.packages('gdata')
library(gdata)
startsWith('hello', 'he')
names(training)
startsWith(names(training),'IL')
IL <- names(trainint)[startsWith(names(training),'IL')]
IL <- names(training)[startsWith(names(training),'IL')]
IL
IL
IL
training[, IL]
dim(training[, IL])
ex <- training[, IL]
ex
preProc <- preProcess(ex,method="pca", pcaComp=2)
preProc
ex
z <- preProcess(ex, method='pca', thresh=0.9)
z
preProcess(ex,method="pca", pcaComp=2)
z <- preProcess(ex, method='pca', thresh=0.9)
z
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL
ex <- training[, IL]
ex
dim(ex)
training$diagnosis
ex <- training[, c(IL, 'diagnosis')]
ex
names(ex)
mod1 <- train(training, method='glm')
mod1 <- train(diagnosis ~ ., data=training, method='glm')
warnings()
mod1
mod1
confusionMatrix(testing$diagnosis, predict(mod1, newdata=testing))
mod1 <- train(diagnosis ~ ., data=training, method='glm')
confusionMatrix(testing$diagnosis, predict(mod1, newdata=testing))
training
names(training)
IL <- names(training)[startsWith(names(training),'IL')]
IL
ex <- training[, c(IL, 'diagnosis')]
mod1 <- train(diagnosis ~ ., data=ex, method='glm')
mod1
confusionMatrix(testing$diagnosis, predict(mod1, newdata=testing))
mod2 <- train(diagnosis ~ ., data=ex, method='glm', preProcess='pca', trControl = trainControl(preProcOptions = list(thresh = 0.8)))
mod2
confusionMatrix(testing$diagnosis, predict(mod2, newdata=testing))
# solution for ex3
#outcome <- read.csv("outcome-of-care-measures.csv", colClasses='character')
#head(outcome)
#outcome[, 11] <- as.numeric(outcome[, 11])
#hist(outcome[, 11])
source('best.R')
stopifnot(best("TX", "heart attack") == "CYPRESS FAIRBANKS MEDICAL CENTER")
stopifnot(best("TX", "heart failure") == "FORT DUNCAN MEDICAL CENTER")
stopifnot(best("MD", "heart attack") == "JOHNS HOPKINS HOSPITAL, THE")
stopifnot(best("MD", "pneumonia") ==  "GREATER BALTIMORE MEDICAL CENTER")
best("BB", "heart attack")
best("NY", "hert attack")
getwd
getwd()
setwd("~/mooc/ProgrammingWithR/ex3")
# solution for ex3
#outcome <- read.csv("outcome-of-care-measures.csv", colClasses='character')
#head(outcome)
#outcome[, 11] <- as.numeric(outcome[, 11])
#hist(outcome[, 11])
source('best.R')
stopifnot(best("TX", "heart attack") == "CYPRESS FAIRBANKS MEDICAL CENTER")
stopifnot(best("TX", "heart failure") == "FORT DUNCAN MEDICAL CENTER")
stopifnot(best("MD", "heart attack") == "JOHNS HOPKINS HOSPITAL, THE")
stopifnot(best("MD", "pneumonia") ==  "GREATER BALTIMORE MEDICAL CENTER")
best("BB", "heart attack")
best("NY", "hert attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
df
df.index
head
tail
outcome <- read.csv("outcome-of-care-measures.csv", colClasses='character')
dim(outcome)
dim(outcome)[1]
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses='character')
## Check that state and outcome are valid
# check that the state exists
if( !(state %in% df[, 7]) ) {
stop('invalid state')
}
# check that the outcome column exists
possible_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
if( ! outcome %in% possible_outcomes) {
stop('invalid outcome')
}
# grab the index of outcome column
idx <- NULL;
if( outcome == 'heart attack') idx <- 11;
if( outcome == 'heart failure') idx <- 17;
if( outcome == 'pneumonia') idx <- 23;
# coerce probability values into numerics and drop NaNs
df[, idx] <- suppressWarnings(as.numeric(df[, idx]))
df <- df[complete.cases(df[,idx]) & (df[, 7] == state), c(2, idx)]
df <- df[ order(df[,2], df[,1]), 1]
## Return hospital name in that state with the given rank
## 30-day death rate
if (num == 'best')
res <- head(df, 1)
else if (num == 'worst')
res <- tail(df, 1)
else {
if (num > dim(df)[1])
res <- NA
else
res <- df[num]
}
res
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses='character')
## Check that state and outcome are valid
# check that the state exists
if( !(state %in% df[, 7]) ) {
stop('invalid state')
}
# check that the outcome column exists
possible_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
if( ! outcome %in% possible_outcomes) {
stop('invalid outcome')
}
# grab the index of outcome column
idx <- NULL;
if( outcome == 'heart attack') idx <- 11;
if( outcome == 'heart failure') idx <- 17;
if( outcome == 'pneumonia') idx <- 23;
# coerce probability values into numerics and drop NaNs
df[, idx] <- suppressWarnings(as.numeric(df[, idx]))
df <- df[complete.cases(df[,idx]) & (df[, 7] == state), c(2, idx)]
df <- df[ order(df[,2], df[,1]), 1]
## Return hospital name in that state with the given rank
## 30-day death rate
print (head(df))
if (num == 'best')
res <- head(df, 1)
else if (num == 'worst')
res <- tail(df, 1)
else {
if (num > dim(df)[1])
res <- NA
else
res <- df[num]
}
res
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses='character')
## Check that state and outcome are valid
# check that the state exists
if( !(state %in% df[, 7]) ) {
stop('invalid state')
}
# check that the outcome column exists
possible_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
if( ! outcome %in% possible_outcomes) {
stop('invalid outcome')
}
# grab the index of outcome column
idx <- NULL;
if( outcome == 'heart attack') idx <- 11;
if( outcome == 'heart failure') idx <- 17;
if( outcome == 'pneumonia') idx <- 23;
# coerce probability values into numerics and drop NaNs
df[, idx] <- suppressWarnings(as.numeric(df[, idx]))
df <- df[complete.cases(df[,idx]) & (df[, 7] == state), c(2, idx)]
df <- df[ order(df[,2], df[,1]), 1]
## Return hospital name in that state with the given rank
## 30-day death rate
print (dim(df))
if (num == 'best')
res <- head(df, 1)
else if (num == 'worst')
res <- tail(df, 1)
else {
if (num > dim(df)[1])
res <- NA
else
res <- df[num]
}
res
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses='character')
## Check that state and outcome are valid
# check that the state exists
if( !(state %in% df[, 7]) ) {
stop('invalid state')
}
# check that the outcome column exists
possible_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
if( ! outcome %in% possible_outcomes) {
stop('invalid outcome')
}
# grab the index of outcome column
idx <- NULL;
if( outcome == 'heart attack') idx <- 11;
if( outcome == 'heart failure') idx <- 17;
if( outcome == 'pneumonia') idx <- 23;
# coerce probability values into numerics and drop NaNs
df[, idx] <- suppressWarnings(as.numeric(df[, idx]))
df <- df[complete.cases(df[,idx]) & (df[, 7] == state), c(2, idx)]
df <- df[ order(df[,2], df[,1]), 1]
## Return hospital name in that state with the given rank
## 30-day death rate
print (length(df))
if (num == 'best')
res <- head(df, 1)
else if (num == 'worst')
res <- tail(df, 1)
else {
if (num > dim(df)[1])
res <- NA
else
res <- df[num]
}
res
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses='character')
## Check that state and outcome are valid
# check that the state exists
if( !(state %in% df[, 7]) ) {
stop('invalid state')
}
# check that the outcome column exists
possible_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
if( ! outcome %in% possible_outcomes) {
stop('invalid outcome')
}
# grab the index of outcome column
idx <- NULL;
if( outcome == 'heart attack') idx <- 11;
if( outcome == 'heart failure') idx <- 17;
if( outcome == 'pneumonia') idx <- 23;
# coerce probability values into numerics and drop NaNs
df[, idx] <- suppressWarnings(as.numeric(df[, idx]))
df <- df[complete.cases(df[,idx]) & (df[, 7] == state), c(2, idx)]
df <- df[ order(df[,2], df[,1]), 1]
## Return hospital name in that state with the given rank
## 30-day death rate
if (num == 'best')
res <- head(df, 1)
else if (num == 'worst')
res <- tail(df, 1)
else {
if (num > length(df)[1])
res <- NA
else
res <- df[num]
}
res
}
rankhospital("TX", "heart failure", 4)
source('rankhospital.R')
stopifnot(rankhospital("TX", "heart failure", 4), "DETAR HOSPITAL NAVARRO")
source('rankhospital.R')
stopifnot(rankhospital("TX", "heart failure", 4), "DETAR HOSPITAL NAVARRO")
rankhospital("TX", "heart failure", 4)
source('rankhospital.R')
stopifnot(rankhospital("TX", "heart failure", 4) == "DETAR HOSPITAL NAVARRO")
source('rankhospital.R')
stopifnot(rankhospital("TX", "heart failure", 4) == "DETAR HOSPITAL NAVARRO")
stopifnot(rankhospital("MD", "heart attack", "worst") ==  "HARFORD MEMORIAL HOSPITAL")
stopifnot(is.na(rankhospital("MN", "heart attack", 5000)))
submit()
submit()
submit()
submit()
